{"version":3,"sources":["Components/Header.js","Components/World.js","Components/StateData.js","Components/India.js","Components/Footer.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Header","Navbar","collapseOnSelect","expand","bg","variant","style","width","position","zIndex","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","to","World","useState","state","setState","useEffect","Axios","get","then","res","data","paddingTop","length","maxHeight","overflowY","Table","striped","bordered","hover","responsive","map","item","key","src","countryInfo","flag","alt","country","cases","recovered","deaths","height","display","justifyContent","alignItems","StateData","stateData","setData","allState","Object","keys","shift","index","district","districtData","total_active","total_confirmed","total_recover","total_death","district_list","x","active","confirmed","deceased","push","Accordion","defaultActiveKey","Card","as","Button","eventKey","Body","district_name","India","maxwidth","Title","Footer","App","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8a63f537.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\nconst Header = () => {\r\n  return (\r\n    <Navbar\r\n      collapseOnSelect\r\n      expand=\"lg\"\r\n      bg=\"dark\"\r\n      variant=\"dark\"\r\n      style={{ width: \"100%\", position: \"fixed\", zIndex: \"1\" }}\r\n    >\r\n      <Navbar.Brand href=\"#home\">Covid 19</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Link to=\"/india\" className=\"nav-link\">\r\n            India\r\n          </Link>\r\n          <Link to=\"/world\" className=\"nav-link\">\r\n            World\r\n          </Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import \"./World.css\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\n\r\nconst World = () => {\r\n  const [state, setState] = useState([]);\r\n  useEffect(() => {\r\n    Axios.get(\"https://corona.lmao.ninja/v2/countries\").then((res) => {\r\n      setState(res.data);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className=\"world\" style={{ paddingTop: \"80px\" }}>\r\n      {state.length > 0 ? (\r\n        <>\r\n          <h3>World</h3>\r\n          <div\r\n            className=\"container mt-5 pt-5 scroll\"\r\n            style={{ maxHeight: \"600px\", overflowY: \" auto\" }}\r\n          >\r\n            <Table striped bordered hover variant=\"dark\" responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th>No</th>\r\n                  <th>Flags</th>\r\n                  <th>Country</th>\r\n                  <th>Total Case</th>\r\n                  <th>Recovered</th>\r\n                  <th>Death</th>\r\n                </tr>\r\n              </thead>\r\n              {state.map((item, key) => {\r\n                return (\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>{key + 1}</td>\r\n                      <td>\r\n                        <img\r\n                          src={item.countryInfo.flag}\r\n                          alt=\"\"\r\n                          style={{ width: \"30px\" }}\r\n                        />\r\n                      </td>\r\n                      <td>{item.country}</td>\r\n                      <td>{item.cases}</td>\r\n                      <td>{item.recovered}</td>\r\n                      <td>{item.deaths}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                );\r\n              })}\r\n            </Table>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"100vh\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <h1>Loading..</h1>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default World;\r\n","import \"./StateData.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Accordion, Card, Button, Table } from \"react-bootstrap\";\r\nimport Axios from \"axios\";\r\n\r\nconst StateData = () => {\r\n  const [stateData, setData] = useState([]);\r\n  useEffect(() => {\r\n    Axios.get(\"https://api.covid19india.org/state_district_wise.json\").then(\r\n      (res) => {\r\n        setData(res.data);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  let allState = Object.keys(stateData);\r\n  allState.shift();\r\n  return (\r\n    <div\r\n      className=\"scroll\"\r\n      style={{ width: \"100%\", height: \"100vh\", overflowY: \"auto\" }}\r\n    >\r\n      {allState?.length > 0 ? (\r\n        <>\r\n          <div className=\"container\">\r\n            <div className=\"row pt-5\">\r\n              <div className=\"col-12\">\r\n                {allState.map((data, index) => {\r\n                  let district = stateData[data].districtData;\r\n                  let districtName = Object.keys(district);\r\n                  let total_active = 0;\r\n                  let total_confirmed = 0;\r\n                  let total_recover = 0;\r\n                  let total_death = 0;\r\n                  let district_list = [];\r\n\r\n                  for (let x in district) {\r\n                    total_active = total_active + district[x].active;\r\n                    total_confirmed = total_confirmed + district[x].confirmed;\r\n                    total_death = total_death + district[x].deceased;\r\n                    total_recover = total_recover + district[x].recovered;\r\n                    let ob = district[x];\r\n                    ob[\"district_name\"] = [x];\r\n                    district_list.push(district[x]);\r\n                  }\r\n\r\n                  return (\r\n                    <Accordion defaultActiveKey=\"1\">\r\n                      <Card className=\"bg-light\">\r\n                        <Card.Header className=\"bg-success\">\r\n                          <Accordion.Toggle\r\n                            as={Button}\r\n                            variant=\"\"\r\n                            eventKey=\"0\"\r\n                            className=\"bg-light\"\r\n                          >\r\n                            {data}{\" \"}\r\n                            <span className=\"bg-info \">\r\n                              [Total Confirmered:{total_confirmed}]\r\n                            </span>{\" \"}\r\n                            <span className=\"bg-warning \">\r\n                              [Total Active:{total_active}]\r\n                            </span>{\" \"}\r\n                            <span className=\"bg-light \">\r\n                              [Total Recovery:{total_recover}]\r\n                            </span>{\" \"}\r\n                            <span className=\"bg-danger\">\r\n                              [Total Death:{total_death} ]\r\n                            </span>\r\n                          </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                          <Card.Body>\r\n                            <Table\r\n                              striped\r\n                              bordered\r\n                              hover\r\n                              className=\"bg-warning\"\r\n                              responsive\r\n                            >\r\n                              <thead>\r\n                                <tr>\r\n                                  <th>No</th>\r\n                                  <th>Districts</th>\r\n                                  <th>Confirmered</th>\r\n                                  <th>Active Case</th>\r\n                                  <th>Recovery Case</th>\r\n                                  <th>Death</th>\r\n                                </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                {district_list.map((item, index) => {\r\n                                  return (\r\n                                    <tr>\r\n                                      <td>{index + 1}</td>\r\n                                      <td>{item.district_name}</td>\r\n                                      <td>{item.confirmed}</td>\r\n                                      <td>{item.active}</td>\r\n                                      <td>{item.recovered}</td>\r\n                                      <td>{item.deceased}</td>\r\n                                    </tr>\r\n                                  );\r\n                                })}\r\n                              </tbody>\r\n                            </Table>\r\n                          </Card.Body>\r\n                        </Accordion.Collapse>\r\n                      </Card>\r\n                    </Accordion>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <h1>Loading...</h1>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StateData;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport StateData from \"./StateData\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport Axios from \"axios\";\r\nconst India = () => {\r\n  const [state, setState] = useState({});\r\n  useEffect((item, key) => {\r\n    Axios.get(\"https://corona.lmao.ninja/v2/countries/india\").then((res) => {\r\n      setState(res.data);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div style={{ paddingTop: \"80px\" }}>\r\n      <img src=\"https://flagsapi.com/IN/flat/64.png\" alt=\"india\" />\r\n      <h3>India</h3>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-6 col-md-4 col-xl-4 pt-4\">\r\n            <Card style={{ maxwidth: \"5px\" }}>\r\n              <Card.Body className=\"bg-info\">\r\n                <Card.Title>Total Case</Card.Title>\r\n                <h2>{state.cases}</h2>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n          <div className=\"col-sm-6 col-md-4 col-xl-4 pt-4\">\r\n            <Card style={{ maxwidth: \"18rem\" }}>\r\n              <Card.Body className=\"bg-warning\">\r\n                <Card.Title>Active Case</Card.Title>\r\n                <h2>{state.active}</h2>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n          <div className=\"col-sm-6 col-md-4 col-xl-4 pt-4\">\r\n            <Card style={{ maxwidth: \"18rem\" }}>\r\n              <Card.Body className=\"bg-success\">\r\n                <Card.Title>Recovery Case</Card.Title>\r\n                <h2>{state.recovered}</h2>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n          <div className=\"col-sm-6 col-md-12 col-xl-12 pt-4\">\r\n            <Card style={{ maxwidth: \"18rem\" }}>\r\n              <Card.Body className=\"bg-danger\">\r\n                <Card.Title>Death</Card.Title>\r\n                <h2>{state.deaths}</h2>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <StateData />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default India;\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className='bg-dark mt-5' style={{width:'100%',height:'100px'}}>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import './App.css';\r\nimport Header from './Components/Header';\r\nimport World from './Components/World';\r\nimport India from './Components/India';\r\nimport Footer from './Components/Footer';\r\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n    <Router>\r\n    <Header/>\r\n    <Switch>\r\n    <Route exact path='/' >\r\n    <India/>\r\n    </Route>\r\n    <Route  path='/india' >\r\n    <India/>\r\n    </Route>\r\n    <World/>\r\n    \r\n    <Route  path='/world' >\r\n    <World/>\r\n    </Route>\r\n    \r\n    </Switch>\r\n    <Footer/>\r\n    </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration.js';\r\nReactDOM.render( \r\n<React.StrictMode>\r\n    <App />\r\n</React.StrictMode>\r\n  ,document.getElementById('root'));\r\n    \r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n\r\n"],"sourceRoot":""}