{"version":3,"sources":["Components/Header.js","Components/World.js","Components/StateData.js","Components/India.js","Components/Footer.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Header","Navbar","collapseOnSelect","expand","bg","variant","style","width","position","zIndex","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","to","World","useState","state","setState","useEffect","Axios","get","then","res","data","maxHeight","overflowY","Table","striped","bordered","hover","responsive","map","item","key","src","countryInfo","flag","alt","country","cases","recovered","deaths","StateData","stateData","setData","allState","Object","keys","shift","index","district","districtData","total_active","total_confirmed","total_recover","total_death","district_list","x","active","confirmed","deceased","push","Accordion","defaultActiveKey","Card","as","Button","eventKey","Body","district_name","India","maxwidth","Title","Footer","height","App","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"mPAqBeA,EAnBA,WAEX,OACI,8BACI,eAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,OAAOC,MAAO,CAACC,MAAM,OAAOC,SAAS,QAAQC,OAAO,KAA3G,UACI,cAACR,EAAA,EAAOS,MAAR,CAAcC,KAAK,QAAnB,sBACA,cAACV,EAAA,EAAOW,OAAR,CAAeC,gBAAc,0BAC7B,cAACZ,EAAA,EAAOa,SAAR,CAAiBC,GAAG,wBAApB,SACI,eAACC,EAAA,EAAD,CAAKC,UAAU,UAAf,UACI,cAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,WAA5B,mBACA,cAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,WAA5B,8B,yCC+CTE,EAtDD,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAMA,OALAC,qBAAU,WACNC,IAAMC,IAAI,0CAA0CC,MAAK,SAACC,GACtDL,EAASK,EAAIC,WAElB,IAEC,sBAAKX,UAAU,QAAf,UAEI,uCACA,qBAAKA,UAAU,sBAAsBX,MAAO,CAACuB,UAAU,QAASC,UAAU,SAA1E,SACA,eAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAC7B,QAAQ,OAAO8B,YAAU,EAAvD,UACA,gCACI,+BACI,oCACA,uCACA,yCACA,4CACA,2CACA,4CAIJd,EAAMe,KAAI,SAACC,EAAMC,GACb,OACI,gCACA,+BACI,6BAAKA,EAAI,IACV,6BAAI,qBAAKC,IAAKF,EAAKG,YAAYC,KAAMC,IAAI,GAAGpC,MAAO,CAACC,MAAM,YAE1D,6BAAK8B,EAAKM,UACT,6BAAKN,EAAKO,QACV,6BAAKP,EAAKQ,YACV,6BAAKR,EAAKS,0B,gCCsEvBC,EAvGG,WAChB,MAA6B3B,mBAAS,IAAtC,mBAAO4B,EAAP,KAAkBC,EAAlB,KACA1B,qBAAU,WACRC,IAAMC,IAAI,yDAAyDC,MAAK,SAACC,GACvEsB,EAAQtB,EAAIC,WAGb,IAGH,IAAIsB,EAAWC,OAAOC,KAAKJ,GAE3B,OADAE,EAASG,QAEP,8BACE,qBAAKpC,UAAU,YAAf,SACE,qBAAKA,UAAU,WAAf,SACE,qBAAKA,UAAU,SAAf,SAKIiC,EAASd,KAAI,SAACR,EAAM0B,GAClB,IAAIC,EAAWP,EAAUpB,GAAM4B,aAE3BC,GADeN,OAAOC,KAAKG,GACZ,GACfG,EAAkB,EAClBC,EAAgB,EAChBC,EAAc,EACdC,EAAgB,GAEpB,IAAI,IAAIC,KAAKP,EAAS,CACpBE,GAA8BF,EAASO,GAAGC,OAC1CL,GAAqCH,EAASO,GAAGE,UACjDJ,GAA6BL,EAASO,GAAGG,SACzCN,GAAgCJ,EAASO,GAAGjB,UACrCU,EAASO,GACd,cAAoB,CAACA,GACvBD,EAAcK,KAAKX,EAASO,IAI9B,OAEE,cAACK,EAAA,EAAD,CAAWC,iBAAiB,IAA5B,SACE,eAACC,EAAA,EAAD,CAAMpD,UAAU,WAAhB,UACE,cAACoD,EAAA,EAAKrE,OAAN,CAAaiB,UAAU,aAAvB,SACE,eAACkD,EAAA,EAAUvD,OAAX,CAAkB0D,GAAIC,IAAQlE,QAAQ,GAAGmE,SAAS,IAAIvD,UAAU,WAAhE,UACGW,EADH,IACS,uBAAMX,UAAU,WAAhB,gCAA+CyC,EAA/C,OADT,KACkF,uBAAMzC,UAAU,cAAhB,2BAA6CwC,EAA7C,OADlF,IACqJ,uBAAMxC,UAAU,YAAhB,6BAA6C0C,EAA7C,OADrJ,IACyN,uBAAM1C,UAAU,YAAhB,0BAA0C2C,EAA1C,aAG3N,cAACO,EAAA,EAAUrD,SAAX,CAAoB0D,SAAS,IAA7B,SACE,cAACH,EAAA,EAAKI,KAAN,UACE,eAAC1C,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACjB,UAAU,aAAakB,YAAU,EAA/D,UACE,gCACE,+BACE,oCACA,2CACA,6CACA,6CACA,+CACA,4CAGJ,gCAGK0B,EAAczB,KAAI,SAACC,EAAKiB,GACzB,OACE,+BACA,6BAAKA,EAAM,IACX,6BAAKjB,EAAKqC,gBACV,6BAAKrC,EAAK2B,YACV,6BAAK3B,EAAK0B,SACV,6BAAK1B,EAAKQ,YACV,6BAAKR,EAAK4B,2CCnB7BU,EAzDD,WACV,MAAyBvD,mBAAS,IAAlC,mBAAOC,EAAP,KAAaC,EAAb,KAQA,OAPJC,qBAAU,SAACc,EAAKC,GAChBd,IAAMC,IAAI,gDAAgDC,MAAK,SAACC,GAC5DL,EAASK,EAAIC,WAIf,IAEM,gCACI,qBAAKW,IAAI,8CAA8CG,IAAI,UAC3D,uCAEA,qBAAKzB,UAAU,YAAf,SACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,kCAAf,SACI,cAACoD,EAAA,EAAD,CAAM/D,MAAO,CAACsE,SAAU,OAAxB,SACI,eAACP,EAAA,EAAKI,KAAN,CAAWxD,UAAU,UAArB,UACI,cAACoD,EAAA,EAAKQ,MAAN,yBACA,6BAAKxD,EAAMuB,eAIvB,qBAAK3B,UAAU,kCAAf,SACI,cAACoD,EAAA,EAAD,CAAM/D,MAAO,CAAEsE,SAAU,SAAzB,SACI,eAACP,EAAA,EAAKI,KAAN,CAAWxD,UAAU,aAArB,UACI,cAACoD,EAAA,EAAKQ,MAAN,0BACA,6BAAKxD,EAAM0C,gBAKvB,qBAAK9C,UAAU,kCAAf,SACI,cAACoD,EAAA,EAAD,CAAM/D,MAAO,CAAEsE,SAAU,SAAzB,SACI,eAACP,EAAA,EAAKI,KAAN,CAAWxD,UAAU,aAArB,UACI,cAACoD,EAAA,EAAKQ,MAAN,4BACA,6BAAKxD,EAAMwB,mBAIvB,qBAAK5B,UAAU,oCAAf,SACI,cAACoD,EAAA,EAAD,CAAM/D,MAAO,CAAEsE,SAAU,SAAzB,SACI,eAACP,EAAA,EAAKI,KAAN,CAAWxD,UAAU,YAArB,UACI,cAACoD,EAAA,EAAKQ,MAAN,oBACA,6BAAKxD,EAAMyB,qBAO/B,cAAC,EAAD,QC9CGgC,EARA,WACX,OACI,qBAAK7D,UAAU,eAAeX,MAAO,CAACC,MAAM,OAAOwE,OAAO,Y,OC2BnDC,MAzBf,WACE,OACE,qBAAK/D,UAAU,MAAf,SACA,eAAC,IAAD,WACA,cAAC,EAAD,IACA,eAAC,IAAD,WACA,cAAC,IAAD,CAAOgE,OAAK,EAACC,KAAK,IAAlB,SACA,cAAC,EAAD,MAEA,cAAC,IAAD,CAAQA,KAAK,SAAb,SACA,cAAC,EAAD,MAEA,cAAC,EAAD,IAEA,cAAC,IAAD,CAAQA,KAAK,SAAb,SACA,cAAC,EAAD,SAIA,cAAC,EAAD,UCbEC,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,4DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACThE,MAAK,SAACqE,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5E,QACfuE,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,+GAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCxFjEC,IAASC,OACT,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEDC,SAASC,eAAe,SDUpB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB5B,OAAOC,SAAS3E,MACpDuG,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMuB,GAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5B3F,MAAK,SAAC4F,GAEL,IAAMC,EAAcD,EAASD,QAAQ5F,IAAI,gBAEnB,MAApB6F,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAMhG,MAAK,SAACqE,GAClCA,EAAa4B,aAAajG,MAAK,WAC7B2D,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IAAI,oEAtFVuB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAMhG,MAAK,WACjC2E,QAAQC,IACN,+GAMJb,EAAgBC,EAAOC,OChC/BmC,K","file":"static/js/main.f6413de0.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\r\nimport { Nav, Navbar } from 'react-bootstrap'\r\nconst Header = () => {\r\n\r\n    return (\r\n        <div>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" style={{width:'100%',position:'fixed',zIndex:'1'}}>\r\n                <Navbar.Brand href=\"#home\">Covid 19</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Link to=\"/india\" className='nav-link'>India</Link>\r\n                        <Link to=\"/world\" className='nav-link'>World</Link>\r\n\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import './World.css'\r\nimport { Table } from 'react-bootstrap'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Axios from 'axios'\r\n\r\nconst World = () => {\r\n    const [state, setState] = useState([])\r\n    useEffect(() => {\r\n        Axios.get('https://corona.lmao.ninja/v2/countries').then((res) => {\r\n            setState(res.data)\r\n        })\r\n    }, [])\r\n    return (\r\n        <div className='world'>\r\n       \r\n            <h3>World</h3>\r\n            <div className=\"container mt-5 pt-5\" style={{maxHeight:'600px', overflowY:' auto'}}>\r\n            <Table striped bordered hover variant=\"dark\" responsive >\r\n            <thead>\r\n                <tr>\r\n                    <th>No</th>\r\n                    <th>Flags</th>\r\n                    <th>Country</th>\r\n                    <th>Total Case</th>\r\n                    <th>Recovered</th>\r\n                    <th>Death</th>\r\n                </tr>\r\n            </thead>\r\n            {\r\n                state.map((item, key) => {\r\n                    return (\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>{key+1}</td>\r\n                           <td><img src={item.countryInfo.flag} alt=\"\" style={{width:'30px'}} />\r\n                           </td>                            \r\n                           <td>{item.country}</td>\r\n                            <td>{item.cases}</td>\r\n                            <td>{item.recovered}</td>\r\n                            <td>{item.deaths}</td>\r\n                        </tr>\r\n        \r\n                    </tbody>\r\n                    \r\n                    )\r\n\r\n                })\r\n            }\r\n            </Table>\r\n       \r\n                \r\n\r\n            </div>\r\n\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default World\r\n","import './StateData.css'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Accordion, Card, Button, Table } from 'react-bootstrap'\r\nimport Axios from 'axios'\r\n\r\n\r\nconst StateData = () => {\r\n  const [stateData, setData] = useState([])\r\n  useEffect(() => {\r\n    Axios.get('https://api.covid19india.org/state_district_wise.json').then((res) => {\r\n      setData(res.data)\r\n\r\n    })\r\n  }, [])\r\n\r\n\r\n  let allState = Object.keys(stateData)\r\n  allState.shift()\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <div className=\"row pt-5\">\r\n          <div className=\"col-12\">\r\n\r\n\r\n            {\r\n\r\n              allState.map((data, index) => {\r\n                let district = stateData[data].districtData\r\n                let districtName = Object.keys(district)\r\n                let total_active = 0\r\n                let total_confirmed = 0\r\n                let total_recover = 0\r\n                let total_death = 0\r\n                let district_list = []\r\n                \r\n                for(let x in district){\r\n                  total_active = total_active + district[x].active;\r\n                  total_confirmed =  total_confirmed + district[x].confirmed;\r\n                  total_death =  total_death + district[x].deceased;\r\n                  total_recover = total_recover + district[x].recovered;\r\n                  let ob=district[x];\r\n                  ob['district_name'] = [x];\r\n                  district_list.push(district[x])\r\n                 \r\n                }\r\n               \r\n                return (\r\n\r\n                  <Accordion defaultActiveKey=\"1\">\r\n                    <Card className='bg-light'>\r\n                      <Card.Header className='bg-success'>\r\n                        <Accordion.Toggle as={Button} variant=\"\" eventKey=\"0\" className='bg-light'>\r\n                          {data} <span className='bg-info '>[Total Confirmered:{total_confirmed}]</span>  <span className='bg-warning '>[Total Active:{total_active}]</span> <span className='bg-light '>[Total Recovery:{total_recover}]</span> <span className='bg-danger'>[Total Death:{total_death} ]</span> \r\n                        </Accordion.Toggle>\r\n                      </Card.Header>\r\n                      <Accordion.Collapse eventKey=\"0\">\r\n                        <Card.Body>\r\n                          <Table striped bordered hover className='bg-warning' responsive>\r\n                            <thead>\r\n                              <tr>\r\n                                <th>No</th>\r\n                                <th>Districts</th>\r\n                                <th>Confirmered</th>\r\n                                <th>Active Case</th>\r\n                                <th>Recovery Case</th>\r\n                                <th>Death</th>\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              \r\n                               {\r\n                                 district_list.map((item,index)=>{\r\n                                return(\r\n                                  <tr>\r\n                                  <td>{index+1}</td>\r\n                                  <td>{item.district_name}</td>\r\n                                  <td>{item.confirmed}</td>\r\n                                  <td>{item.active}</td>\r\n                                  <td>{item.recovered}</td>\r\n                                  <td>{item.deceased}</td>\r\n                                  </tr>\r\n                                )\r\n                                 })\r\n                               }\r\n\r\n                              \r\n                            </tbody>\r\n                          </Table>\r\n                        </Card.Body>\r\n                      </Accordion.Collapse>\r\n                    </Card>\r\n                  </Accordion>\r\n                )\r\n              })\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StateData\r\n","import React,{useState,useEffect} from 'react'\r\nimport StateData from './StateData'\r\nimport { Card } from 'react-bootstrap'\r\nimport Axios from 'axios'\r\nconst India = () => {\r\n    const [state,setState] = useState({})\r\nuseEffect((item,key)=>{\r\nAxios.get('https://corona.lmao.ninja/v2/countries/india').then((res)=>{\r\n    setState(res.data)\r\n\r\n})\r\n\r\n},[])\r\n    return (\r\n        <div>\r\n            <img src=\"https://www.countryflags.io/in/shiny/64.png\" alt=\"india\" />\r\n            <h3>India</h3>\r\n            \r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-6 col-md-4 col-xl-4 pt-4\">\r\n                        <Card style={{maxwidth: '5px' }} >\r\n                            <Card.Body className='bg-info'>\r\n                                <Card.Title>Total Case</Card.Title>\r\n                                <h2>{state.cases}</h2>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </div>\r\n                    <div className=\"col-sm-6 col-md-4 col-xl-4 pt-4\">\r\n                        <Card style={{ maxwidth: '18rem' }}>\r\n                            <Card.Body className='bg-warning'>\r\n                                <Card.Title>Active Case</Card.Title>\r\n                                <h2>{state.active}</h2>\r\n                            \r\n                            </Card.Body>\r\n                        </Card>\r\n                    </div>\r\n                    <div className=\"col-sm-6 col-md-4 col-xl-4 pt-4\">\r\n                        <Card style={{ maxwidth: '18rem' }}>\r\n                            <Card.Body className='bg-success'>\r\n                                <Card.Title>Recovery Case</Card.Title>\r\n                                <h2>{state.recovered}</h2>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </div>\r\n                    <div className=\"col-sm-6 col-md-12 col-xl-12 pt-4\">\r\n                        <Card style={{ maxwidth: '18rem' }}>\r\n                            <Card.Body className='bg-danger'>\r\n                                <Card.Title>Death</Card.Title>\r\n                                <h2>{state.deaths}</h2>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n            <StateData />\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default India\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className='bg-dark mt-5' style={{width:'100%',height:'100px'}}>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import './App.css';\nimport Header from './Components/Header';\nimport World from './Components/World';\nimport India from './Components/India';\nimport Footer from './Components/Footer';\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom'\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Router>\n    <Header/>\n    <Switch>\n    <Route exact path='/' >\n    <India/>\n    </Route>\n    <Route  path='/india' >\n    <India/>\n    </Route>\n    <World/>\n    \n    <Route  path='/world' >\n    <World/>\n    </Route>\n    \n    </Switch>\n    <Footer/>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration.js';\nReactDOM.render( \n<React.StrictMode>\n    <App />\n</React.StrictMode>\n  ,document.getElementById('root'));\n    \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n\n"],"sourceRoot":""}